
・CHandle[5]
|
|	[0]  241,237,238 : 背景色
	[1]  209,204,220 : マウスが重なった要素の背景
	[2]  61,84,103 : 各種文字の色
	[3]  219,84,67 : プレイヤー選択済み
	[4]  72,169,166 : COM選択済み
	[5] = GetColor(225, 225, 225);		// 選択可能なマス
	[6] = GetColor(255, 215, 0);		// タイトル画面の選択済み


・gameF[4][4][4]
|
|	-1 : 置けない　0 : 置ける　　111 : プレイヤー陣地　222 : ＣＯＭ陣地


・playerFlag
|
|	スタート画面で先行後攻の選択によって 0 or 1 を代入する
	1 : プレイヤーの番　　2 : ＣＯＭの番

・ＣＯＭの挙動
｜
｜　[ 1 / (randomFreq * 2) ] 　の確率でリーチを見逃す
	[ 1 / randomFreq ]　 の確率でランダムに打つ、それ以外は思考ルーチンを通す

	★			：randomFreq = 2 (25%)  (50%) ,		depthNow = 1 	
	★★		：randomFreq = 3 (16.6%)(33.3%),	depthNow = 2 
	★★★		：randomFreq = 4 (12.5%)(25%),		depthNow = 3 
	★★★★	：randomFreq = 5 (10%)  (20%),		depthNow = 4 
	★★★★★	：randomFreq = 6 (8.3%) (16.6%),	depthNow = 5 
	★★★★★★：randomFreq = 1 ,					depthNow = 7		// ランダムに打たない

・ヒント
｜
｜　評価関数が完璧でないため星５に先手で負けることがある
　　ＣＯＭ同士で戦わせたら先手後手で同じ指し手になるからプログラムは間違っていない

	

・checkWin()
|
|	三重ループ(z,x,y)のすべての値で checkDirection() を呼び出して陣地が４つ並んでいるかをチェックする
	chekcDirection() がフィールド外になると false を返すので実現可能

	例）// 横方向 (dx=1, dy=0, dz=0)
		if (checkDirection(2, 0, 0, 1, 0, 0, player)) return true;

		を呼び出すと x は２つ右に進むとフィールド外になるので false を返す

		※  checkDirection() の戻り値の型を int にして cnt を返すようにすればＣＯＭの思考ルーチンでも使えるようになるかも





【参考文献】
｜	https://pictblog.com/gmini-max
｜	https://www.webcyou.com/?p=6997
｜	https://www.fit.ac.jp/~sakuta/scorefour/scorefour.ja.html#playgame  // 福岡工業大学の立体４目プログラム（対戦用）
｜	http://www.iba.t.u-tokyo.ac.jp/software/gameHP/index.html	// プログラムファイル


〇思考ルーチン
・プレイヤーのビンゴを阻止する
・ＣＯＭのビンゴを狙う
・盤面に得点を与えて、ミニマックス法を使い、盤面評価値が高い手を最善手とする
　（自分のビンゴと相手のビンゴを検出したら評価値を 999 , -999 とする）



・積極的にリーチを狙う
・相手のアシストを誘導する
| （中盤で進んでいくと、相手がここにおいてくれればその上に自分が置くことで、四目そろう、というパターンが起こります。
|   相手からするとおいてしまえばその上に置かれて負ける（アシストすることになってしまう）ので、その列には置くことが不可能になる）

・ミニマックス法を使う
（ミニマックス法、英: minimax）またはミニマックス探索とは、想定される最大の損害が最小になるように決断を行う戦略のこと
　Mini-Max法では深さ優先探索で進める



〇♪
『とある点がとある線よりy座標が上にあるかの判定方法』
方法1: 直線の方程式を使う
もし直線の方程式が与えられている場合、例えば直線が y=mx+bの形で表されているとします。
点の x-座標をその直線の方程式に代入します。すると、直線上のその点の y-座標が得られます。例えば、点が P(x0,y0)であれば、直線上の点の y-座標は 
y=mx0+byとなります。
その点の実際の y0座標と直線上の点の y-座標 mx0+bを比較します。
もし y0>mx0+bであれば、その点は直線より上にあります。
もし y0<mx0+bであれば、その点は直線より下にあります。
もし y0=mx0+bであれば、その点は直線上にあります。


〇♪
立体四目並べの序盤は、４隅の取り合いから始まります。

これは、平面で見た時に３方向に接続できる位置であるからです。

２段目と３段目になると状況は一変して、ラインの交差する中心の４コマを押さえると有利になります。

１段目は４隅、２段目と３段目は中心を取ることが、戦略的な意味でも、立体四目並べの定石となります。


『評価関数に実装したら強くなりそう』
・三段決勝点の数
・立体四目並べの勝利条件に基づいた評価(ゲームロジックベース)
・ゲーム終盤は指せる手の候補が１６から減るのでそのタイミングで探索する深さを深くしてもいいかも（指し手をカウントする）
　→ 全探索ではなくて局面数で制御する timesCnt を使って if(timesCnt == 10000000) 一千万局面を最大にしてもいいかも